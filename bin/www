#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require("../app");
const cors = require("cors");
app.use(cors());
var debug = require("debug")("odin-book:server");
var http = require("http");
const socketIo = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/////
const io = socketIo(server, {
  cors: {
    origin: "http://localhost:3001",
    methods: ["GET", "POST", "PUT"],
    credentials: true,
  },
});

const arr = [];
io.on("connection", (socket) => {
  console.log("new client connected");
  console.log(socket.id);

  socket.on("connection", (username) => {
    const user = arr.find((value) => username == value.user);

    if (!user) {
      console.log("user below");
      socket.on("join", function (data) {
        socket.join(data.user); // We are using room of socket io
      });
      arr.push({ user: username, socketid: socket });
      // console.log(arr)s;
    }
    console.log("users", arr);
  });

  socket.emit("check", "hey bro");

  //the message is send from the client

  socket.on("send-message", (data) => {
    //find socket id
    for (let i = 0; i < arr.length; i++) {
      console.log(arr[i].user, data.to);
      if (arr[i].user == data.to) {
        // console.log("arr", arr[i].socketid, arr[i].user);
        // arr[i].socketid.broadcast
        //   .to(arr[i].socketid.id)
        //   .emit("whisper", data.msg);
        io.sockets.in(data.user).emit("new_msg", { msg: "hello" });
        // arr[i].socketid.emit("whisper", "please work mataji please.");
        // io.sockets.emit("nn", "tired");
        console.log(data);
        break;
      }
    }
  });
  // socket.disconnect();
});

server.on("error", onError);
server.on("listening", onListening);
////

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
